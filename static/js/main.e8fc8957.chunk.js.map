{"version":3,"sources":["components/LocationInfoBox.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationInfoBox","info","className","id","title","Header","icon","locationIcon","App","useState","eventData","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchData","map","iconMarkup","renderToStaticMarkup","customMarkerIcon","divIcon","html","MapContainer","center","zoom","scrollWheelZoom","zoomControl","TileLayer","attribution","url","ev","categories","Marker","position","geometries","coordinates","Popup","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAceA,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKC,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAASD,EAAKE,QACtB,yCAAW,iCAASF,EAAKG,kB,yBCI1BC,EARA,WACX,OACI,wBAAQH,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMI,KAAMC,MAAhB,2CCgEGC,MAjEf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGiBF,oBAAS,GAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAKbC,qBAAU,YAEO,uCAAG,gCAAAC,EAAA,6DAChBF,GAAW,GADK,SAEEG,MAAM,mDAFR,cAEVC,EAFU,gBAGSA,EAAIC,OAHb,gBAGRC,EAHQ,EAGRA,OACRR,EAAaQ,GACbN,GAAW,GALK,4CAAH,qDAQfO,KACC,IAGH,IAQIC,EAREC,EAAaC,+BAAqB,mBAAGrB,UAAU,+BAE/CsB,EAAmBC,kBAAQ,CAC/BC,KAAMJ,IAmCR,OA5BED,EADET,EACI,qBAAKV,UAAU,SAAf,wBAGJ,eAACyB,EAAA,EAAD,CAAcC,OAPD,CAAC,SAAU,UAOQC,KAAM,EAAGC,iBAAiB,EAAM5B,UAAU,MAAM6B,aAAa,EAA7F,UACE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAGJxB,EAAUW,KAAI,SAAAc,GACZ,OAA4B,IAAxBA,EAAGC,WAAW,GAAGjC,GAEjB,cAACkC,EAAA,EAAD,CACEC,SAAU,CAACH,EAAGI,WAAW,GAAGC,YAAY,GAAIL,EAAGI,WAAW,GAAGC,YAAY,IACzElC,KAAMkB,EAFR,SAIE,cAACiB,EAAA,EAAD,UACE,cAAC,EAAD,CAAiBxC,KAAM,CAACE,GAAIgC,EAAGhC,GAAIC,MAAO+B,EAAG/B,aAI5C,WAQjB,gCACE,cAAC,EAAD,IACCiB,MCtDQqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8fc8957.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LocationInfoBox = ({ info }) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{info.id}</strong></li>\r\n                <li>TITLE: <strong>{info.title}</strong></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocationInfoBox;","import React from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1><Icon icon={locationIcon}/>Wildfire Tracker (Powered By NASA)</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { divIcon } from 'leaflet';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { useEffect, useState } from 'react';\nimport LocationInfoBox from './components/LocationInfoBox';\nimport Header from './components/Header';\nfunction App() {\n\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    \n    const fetchData = async () => {\n      setLoading(true);\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events');\n      const { events } = await res.json();\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n\n  const iconMarkup = renderToStaticMarkup(<i className=\"fas fa-fire location-icon\"></i>);\n\n  const customMarkerIcon = divIcon({\n    html: iconMarkup,\n  });\n\n  const position = [42.3265, -122.8756];\n\n  let map;\n  if (loading)\n    map = <div className=\"loader\">Loading...</div>\n  else\n    map = (\n      <MapContainer center={position} zoom={6} scrollWheelZoom={true} className=\"map\" zoomControl={false}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {\n          eventData.map(ev => {\n            if (ev.categories[0].id === 8) {\n              return (\n                <Marker\n                  position={[ev.geometries[0].coordinates[1], ev.geometries[0].coordinates[0]]}\n                  icon={customMarkerIcon}\n                >\n                  <Popup>\n                    <LocationInfoBox info={{id: ev.id, title: ev.title}}/>\n                  </Popup>\n                </Marker>\n              )\n            } return null;\n          })\n        }\n        \n      </MapContainer>\n    );\n\n  return (\n    <div>\n      <Header />\n      {map}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}